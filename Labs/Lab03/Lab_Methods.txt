The Lab Report for Lab 3

Abstract:
    In Lab 3 the team was tasked with implementing several simultaneous tasks using different
     schedulers on an Arduino Mega Microcontroller board. The tasks included implementing and
      explaining a round-robin (RR) non-preemptive scheduler, a RR scheduler using function
       pointers and timer synchronization, a scheduler using Task Control Blocks (TCBs) for each
    task, and a simple Interrupt Service Routine (ISR). The team successfully completed the lab,
     demonstrating their ability to manage multiple tasks, implement different types of schedulers,
    and use hardware precision for scheduler cycle synchronization.

Introduction:
    This report outlines the team's approach and solutions to Lab 3. The lab required us to implement
     several tasks simultaneously using different schedulers. These tasks ranged from flashing an
      external LED, emitting a theme song through a speaker, displaying a count on a 7-segment LED
       display, to implementing a supervisor task that controls the start and stop of other tasks.
        We implemented this all using an Arduino Mega 2560, LEDs, resistors, a speaker, and a
         7-segment LED display to accomplish these tasks. The team's solutions demonstrate their
          understanding of round-robin schedulers, task control blocks, and interrupt service routines,
           as well as their ability to apply these concepts in a practical setting.

Methods:

To implement the different schedulers, we first created a set of tasks that would run simultaneously.
 These tasks included flashing an external LED, emitting a theme song through a speaker, displaying a
  count on a 7-segment LED display, and implementing a supervisor task that controls the start and stop
   of other tasks. We then implemented the following schedulers:

1. Round-robin (RR) non-preemptive scheduler:
    We implemented this scheduler by creating a loop that iterates through each task and runs it for a
     fixed amount of time before moving on to the next task. This scheduler is non-preemptive, meaning
      that a task will run until it completes or until its time slice is up.

2. RR scheduler using function pointers and timer synchronization:
    This scheduler is similar to the non-preemptive scheduler, but it uses function pointers to call each
     task and timer synchronization to ensure that each task runs for the same amount of time.

3. Scheduler using Task Control Blocks (TCBs) for each task:
    For this scheduler, we created a TCB for each task that contained information about the task's state,
     priority, and execution time. We then implemented a priority-based scheduler that would run the task
      with the highest priority first.

4. Simple Interrupt Service Routine (ISR):
    Finally, we implemented a simple ISR that would run a task whenever a hardware interrupt occurred.
     We used this ISR to flash an external LED whenever a button was pressed.

Throughout the implementation of these schedulers, we made use of hardware precision for scheduler cycle
 synchronization. This allowed us to ensure that each task ran for the same amount of time and that the
  overall system was synchronized and running smoothly.

Procedures and Results:

To begin the lab, we first created a set of tasks that would run simultaneously. These tasks included flashing an external LED, emitting the Mario Theme Song through a speaker, displaying a count on a 7-segment LED display, and implementing a supervisor task that controls the start and stop of other tasks.

Next, we implemented four different schedulers to manage these tasks. The first scheduler was a round-robin (RR) non-preemptive scheduler, which we implemented by creating a loop that iterates through each task and runs it for a fixed amount of time before moving on to the next task. This scheduler is non-preemptive, meaning that a task will run until it completes or until its time slice is up.

The second scheduler was a RR scheduler using function pointers and timer synchronization. This scheduler is similar to the non-preemptive scheduler, but it uses function pointers to call each task and timer synchronization to ensure that each task runs for the same amount of time.

The third scheduler was a scheduler using Task Control Blocks (TCBs) for each task. For this scheduler, we created a TCB for each task that contained information about the task's state, priority, and execution time. We then implemented a priority-based scheduler that would run the task with the highest priority first.

Finally, we implemented a simple Interrupt Service Routine (ISR) that would run a task whenever a hardware interrupt occurred. We used this ISR to flash an external LED whenever a button was pressed.

Throughout the implementation of these schedulers, we made use of hardware precision for scheduler cycle synchronization. This allowed us to ensure that each task ran for the same amount of time and that the overall system was synchronized and running smoothly.

Overall, the team successfully completed the lab, demonstrating their ability to manage multiple tasks, implement different types of schedulers, and use hardware precision for scheduler cycle synchronization.        

Code Documentation:
Here is a breakdown of the different functions we used in the code to implement the different schedulers:

/**
 * @brief Struct to hold all of a Tasks running state
 * 
 */
typedef struct TCB {
  /// Task name
  char name[20];
  /// Task function
  void (*fn_ptr)();
  /// Task id
  int id;
  /// Number of times task has been run
  int nTimes;
  /// Amount of time in ms the task should sleep for
  int timeSleep;
  /// Current clock time this task sees
  long time;
  /// Running state of this task
  STATE state;
} tcb;

/**
 * @brief Sleeps the current task for a specified amount of time
 * 
 * @param t The amount of time to sleep in milliseconds
 */
void sleep_474(long t);

/**
 * @brief Synchronizes the task scheduler with the timer
 * 
 */
void schedule_sync();

/**
 * @brief Copies the contents of one TCB to another
 * 
 * @param dst The destination TCB
 * @param src The source TCB
 */
void copy_tcb(tcb * dst, tcb * src);

/**
 * @brief Terminates the current task
 * 
 */
void task_self_quit();

/**
 * @brief Starts a task
 * 
 * @param task The task to start
 */
void task_start(tcb * task);

/**
 * @brief Loads a task with a given function and name
 * 
 * @param fn_ptr The function to load
 * @param name The name of the task
 */
void task_load(void (*fn_ptr)(), const char * name);

/**
 * @brief Finds a dead task with a given name
 * 
 * @param name The name of the task to find
 * @return A pointer to the dead task, or NULL if not found
 */
tcb * find_dead_task(const char * name);

/**
 * @brief Sets the frequency of the DDS output
 * 
 * @param freq The frequency to set in Hz
 */
void setOC4AFreq(uint32_t freq);

/**
 * @brief Sends an array of bytes to the 7-segment display
 * 
 * @param arr The array of bytes to send
 */
void send7(byte arr[7]);

/**
 * @brief Converts an integer value to an array of digits
 * 
 * @param digits An array to store the digits in
 * @param val The value to convert
 */
void convert(int * digits, int val);

/**
 * @brief Task 1 function
 * 
 */
void task1();

/**
 * @brief Task 2 function
 * 
 */
void task2();

/**
 * @brief Task 4.2 function
 * 
 */
void task4_2();

/**
 * @brief Task 5 function
 * 
 */
void task5();

/**
 * @brief Task 5.1 function
 * 
 */
void task5_1();

/**
 * @brief Sets up interrupts
 * 
 */
void interruptSetup();

/**
 * @brief Sets up the speaker
 * 
 */
void speakerSetup();

/**
 * @brief Sets up the 7-segment display
 * 
 */
void displaySetup();

/**
 * @brief Sets up the LED
 * 
 */
void ledSetup();

/**
 * @brief Sets up the DDS
 * 
 */
void DDSSetup();

